#include<bits/stdc++.h>
using namespace std;

int board[10][10];

bool isSafe(int n, int row, int col)
{
    for(int i=row-1; i>=0; i--)    // same column
    {
        if(board[i][col] == 1)
            return false;
    }
    
    // left diagonal
    
    for(int i=row-1,j=col-1; i>=0 && j>=0; i--,j--)
    {
        if(board[i][j] == 1)
        {
            return false;
        }
    }
    
    // right diagonal;
    
    for(int i=row-1,j=col+1; i>=0 && j<n; i--,j++)
    {
        if(board[i][j] == 1)
            return false;
    }
    
    return true;
}

// void nqueens(int n, int row){
//     if(row == n)
//     {
//         for(int i=0; i<n; i++){
//             for(int j=0; j<n; j++){
//                 cout<<board[i][j]<<" ";
//             }
//             cout<<endl;
//         }
//         return;
//     }
    
//     for(int i=0; i<n; i++){
//         if(isSafe(n, row, i)){
//             board[row][i] = 1;
//             nqueens(n, row+1);
//                 //return true;
//             board[row][i] = 0;
//         }
//     }
//     return ;
    
// }
void nqueens(int n, int row)
{
    if(row == n)
    {
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                cout<<board[i][j]<<" ";
            }
        }
        cout<<endl;
        return;
    }
    
    for(int i=0; i<n; i++)
    {
        if(isSafe(n, row, i))
        {
            board[row][i] = 1;
            nqueens(n, row+1);
            board[row][i] = 0;
        } 
    }
    
    return;
    
}

void solve(int n)
{
    //int board[n][n];
    memset(board, 0, sizeof(board));
    
    // if(nqueens(n, 0))
    // {
    //     for(int i=0; i<n; i++){
    //         for(int j=0; j<n; j++){
    //             cout<<board[i][j]<<" ";
    //         }
    //         cout<<endl;
    //     }
    // }
    // else
    //     cout<<"No"<<endl;
    nqueens(n, 0);
    return;
}



int main()
{
    int n;
    cin>>n;
    
    solve(n);
    return 0;
}
